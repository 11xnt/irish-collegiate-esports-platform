// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tournament {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  organiser TournamentOrganiser @relation(fields: [organiserId], references: [id])
  organiserId Int
  partTeams Team[]
  prizePool Int?
  maxTeams  Int?
  eliGame   Game?    @relation(fields: [gameName], references: [name])
  createdAt DateTime @default(now())
  gameName  String
  minTeamSize Int?
  maxTeamSize Int?
}

model TournamentOrganiser {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String?
  image     String?
  tournaments Tournament[]
  admins    User[]  @relation("Admin")
  owner     User @relation(fields: [ownerId], references: [id], "Owner")
  ownerId Int
}

model Team {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  partTour Tournament[]
  players  Player[]
  captain  Player       @relation(fields: [captainId], references: [id], "Captain")
  captainId Int
  university University[]
}

model Game {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  gameTour Tournament[]
  abbrev   String       @default("N/A")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email     String   @unique
  password  String
  playerID  Player?
  adminID   Admin?
  adminFor TournamentOrganiser[]  @relation("Admin")
  ownerOf  TournamentOrganiser[]  @relation("Owner")
  friends   User[] @relation("friendOf")
  friendOf User[] @relation("friendOf")
  gameAccounts Account[]
  createdAt DateTime @default(now())
}

model Account {
  id                 Int  @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Player {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userID], references: [id])
  userID Int  @unique
  teams  Team[]
  university University @relation(fields: [universityId], references: [id])
  universityId Int
  captainOf  Team[]  @relation("Captain")

}

model Admin {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userID], references: [id])
  userID Int  @unique

}

model University {
  id     Int  @id @default(autoincrement())
  name   String
  domain String
  discord String
  abbreviation String

  players Player[]
  teams Team[]
}
